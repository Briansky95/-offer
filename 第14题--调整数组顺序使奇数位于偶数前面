题目描述:
	输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。

代码有三种思路：

	① 使用类似于冒泡排序的方法，判断是否为前偶后奇，若是则交换

	② 新增两个数组或者list，分别存放奇数和偶数，最后再进行合并（该方法占用空间大，尽量不用）

	③ 使用两个指针，第一个指针index1，第二个为index2=index1+1，找到index1为偶数，和index2为奇数，将数组[index1，index2-1]向后移一位，将index1填入index2的值，终止条件是第二个指针向后遍历失败。

代码:
	//方法1
	public static void reOrderArray(int [] array) {
	    if(array==null || array.length==0) return;
	    for(int i=0; i<array.length;i++)
	    {
		for(int j=0;j<array.length-1-i;j++)
		{
			if(array[j]%2==0 && array[j+1]%2!=0) //判断是否为前偶后奇
			{
				int temp = array[j];
				array[j]=array[j+1];
				array[j+1] = temp;
			}
		}
	    }
	}

	//方法2
	public static void reOrderArray(int [] array) {
		ArrayList<Integer> oddList = new ArrayList<>();
		ArrayList<Integer> evenList = new ArrayList<>();
		for(int i=0; i<array.length; i++)
		{
			if(array[i]%2 == 0) 
			{
				evenList.add(array[i]);
			}
			else
			{
				oddList.add(array[i]);
			}			
		}
		for(int j=0; j<oddList.size();j++)
		{
			array[j]=oddList.get(j);
		}
		for(int k=0; k<evenList.size();k++)
		{
			array[oddList.size()+k]=evenList.get(k);
		}
	}
